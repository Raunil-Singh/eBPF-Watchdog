/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __TRACE_BPF_SKEL_H__
#define __TRACE_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

#define BPF_SKEL_SUPPORTS_MAP_AUTO_ATTACH 1

struct trace_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata_str1_1;
	} maps;
	struct {
		struct bpf_program *handle_execve;
	} progs;
	struct {
		struct bpf_link *handle_execve;
	} links;

#ifdef __cplusplus
	static inline struct trace_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct trace_bpf *open_and_load();
	static inline int load(struct trace_bpf *skel);
	static inline int attach(struct trace_bpf *skel);
	static inline void detach(struct trace_bpf *skel);
	static inline void destroy(struct trace_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
trace_bpf__destroy(struct trace_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
trace_bpf__create_skeleton(struct trace_bpf *obj);

static inline struct trace_bpf *
trace_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct trace_bpf *obj;
	int err;

	obj = (struct trace_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = trace_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	trace_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct trace_bpf *
trace_bpf__open(void)
{
	return trace_bpf__open_opts(NULL);
}

static inline int
trace_bpf__load(struct trace_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct trace_bpf *
trace_bpf__open_and_load(void)
{
	struct trace_bpf *obj;
	int err;

	obj = trace_bpf__open();
	if (!obj)
		return NULL;
	err = trace_bpf__load(obj);
	if (err) {
		trace_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
trace_bpf__attach(struct trace_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
trace_bpf__detach(struct trace_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *trace_bpf__elf_bytes(size_t *sz);

static inline int
trace_bpf__create_skeleton(struct trace_bpf *obj)
{
	struct bpf_object_skeleton *s;
	struct bpf_map_skeleton *map __attribute__((unused));
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "trace_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = 24;
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt,
			sizeof(*s->maps) > 24 ? sizeof(*s->maps) : 24);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	map = (struct bpf_map_skeleton *)((char *)s->maps + 0 * s->map_skel_sz);
	map->name = ".rodata.str1.1";
	map->map = &obj->maps.rodata_str1_1;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "handle_execve";
	s->progs[0].prog = &obj->progs.handle_execve;
	s->progs[0].link = &obj->links.handle_execve;

	s->data = trace_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *trace_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xe8\x0a\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x1a\0\
\x01\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x10\0\0\0\x85\0\0\0\x06\
\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\x54\x72\x61\x63\x69\
\x6e\x67\x20\x65\x78\x65\x63\x76\x65\x0a\0\x01\x11\x01\x25\x25\x13\x05\x03\x25\
\x72\x17\x10\x17\x1b\x25\x11\x1b\x12\x06\x73\x17\0\0\x02\x34\0\x03\x25\x49\x13\
\x3f\x19\x3a\x0b\x3b\x0b\x02\x18\0\0\x03\x01\x01\x49\x13\0\0\x04\x21\0\x49\x13\
\x37\x0b\0\0\x05\x24\0\x03\x25\x3e\x0b\x0b\x0b\0\0\x06\x24\0\x03\x25\x0b\x0b\
\x3e\x0b\0\0\x07\x34\0\x49\x13\x3a\x0b\x3b\x0b\x02\x18\0\0\x08\x34\0\x03\x25\
\x49\x13\x3a\x0b\x3b\x0b\x1c\x0f\0\0\x09\x0f\0\x49\x13\0\0\x0a\x15\x01\x49\x13\
\x27\x19\0\0\x0b\x05\0\x49\x13\0\0\x0c\x18\0\0\0\x0d\x26\0\x49\x13\0\0\x0e\x16\
\0\x49\x13\x03\x25\x3a\x0b\x3b\x05\0\0\x0f\x2e\x01\x11\x1b\x12\x06\x40\x18\x7a\
\x19\x03\x25\x3a\x0b\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x10\x05\0\x03\x25\x3a\
\x0b\x3b\x0b\x49\x13\0\0\x11\x0f\0\0\0\0\xac\0\0\0\x05\0\x01\x08\0\0\0\0\x01\0\
\x1d\0\x01\x08\0\0\0\0\0\0\0\x02\x02\x30\0\0\0\x08\0\0\0\x02\x03\x2e\0\0\0\0\
\x05\x02\xa1\0\x03\x3a\0\0\0\x04\x3e\0\0\0\x04\0\x05\x04\x06\x01\x06\x05\x08\
\x07\x07\x4c\0\0\0\0\x0a\x02\xa1\x01\x03\x3a\0\0\0\x04\x3e\0\0\0\x10\0\x08\x06\
\x61\0\0\0\x02\xb1\x06\x09\x66\0\0\0\x0a\x77\0\0\0\x0b\x7b\0\0\0\x0b\x85\0\0\0\
\x0c\0\x05\x07\x05\x08\x09\x80\0\0\0\x0d\x3a\0\0\0\x0e\x8e\0\0\0\x09\x01\x0f\
\x75\x05\x08\x07\x04\x0f\x02\x30\0\0\0\x01\x5a\x0a\0\x08\xaa\0\0\0\x10\x0c\0\
\x08\xae\0\0\0\0\x05\x0b\x05\x04\x11\0\x38\0\0\0\x05\0\0\0\0\0\0\0\x27\0\0\0\
\x33\0\0\0\x6c\0\0\0\x74\0\0\0\x79\0\0\0\x8d\0\0\0\x9e\0\0\0\xa3\0\0\0\xb0\0\0\
\0\xb6\0\0\0\xc4\0\0\0\xc8\0\0\0\x55\x62\x75\x6e\x74\x75\x20\x63\x6c\x61\x6e\
\x67\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\x31\x38\x2e\x31\x2e\x33\x20\x28\x31\
\x75\x62\x75\x6e\x74\x75\x31\x29\0\x74\x72\x61\x63\x65\x2e\x62\x70\x66\x2e\x63\
\0\x2f\x68\x6f\x6d\x65\x2f\x72\x61\x75\x6e\x69\x6c\x2d\x73\x69\x6e\x67\x68\x2f\
\x50\x72\x6f\x6a\x65\x63\x74\x73\x2f\x65\x42\x50\x46\x2d\x57\x61\x74\x63\x68\
\x64\x6f\x67\x2f\x4c\x65\x61\x72\x6e\x69\x6e\x67\x5f\x50\x68\x61\x73\x65\0\x4c\
\x49\x43\x45\x4e\x53\x45\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\
\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x62\x70\x66\x5f\x74\x72\x61\x63\
\x65\x5f\x70\x72\x69\x6e\x74\x6b\0\x6c\x6f\x6e\x67\0\x75\x6e\x73\x69\x67\x6e\
\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x75\x33\x32\0\x68\x61\x6e\x64\x6c\x65\x5f\
\x65\x78\x65\x63\x76\x65\0\x69\x6e\x74\0\x63\x74\x78\0\x1c\0\0\0\x05\0\x08\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\
\0\0\xb4\0\0\0\xb4\0\0\0\xf6\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\x01\0\0\
\x0d\x03\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\
\x09\0\0\0\x01\0\0\x0c\x02\0\0\0\xcd\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\
\0\0\0\0\0\x03\0\0\0\0\x05\0\0\0\x07\0\0\0\x04\0\0\0\xd2\0\0\0\0\0\0\x01\x04\0\
\0\0\x20\0\0\0\xe6\0\0\0\0\0\0\x0e\x06\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\
\0\x05\0\0\0\x07\0\0\0\x10\0\0\0\xee\0\0\0\x01\0\0\x0f\0\0\0\0\x08\0\0\0\0\0\0\
\0\x04\0\0\0\0\x63\x74\x78\0\x69\x6e\x74\0\x68\x61\x6e\x64\x6c\x65\x5f\x65\x78\
\x65\x63\x76\x65\0\x74\x70\x2f\x73\x79\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\
\x5f\x65\x6e\x74\x65\x72\x5f\x65\x78\x65\x63\x76\x65\0\x2f\x68\x6f\x6d\x65\x2f\
\x72\x61\x75\x6e\x69\x6c\x2d\x73\x69\x6e\x67\x68\x2f\x50\x72\x6f\x6a\x65\x63\
\x74\x73\x2f\x65\x42\x50\x46\x2d\x57\x61\x74\x63\x68\x64\x6f\x67\x2f\x4c\x65\
\x61\x72\x6e\x69\x6e\x67\x5f\x50\x68\x61\x73\x65\x2f\x74\x72\x61\x63\x65\x2e\
\x62\x70\x66\x2e\x63\0\x20\x20\x20\x20\x62\x70\x66\x5f\x74\x72\x61\x63\x65\x5f\
\x70\x72\x69\x6e\x74\x6b\x28\x22\x54\x72\x61\x63\x69\x6e\x67\x20\x65\x78\x65\
\x63\x76\x65\x5c\x6e\x22\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x22\x54\x72\x61\
\x63\x69\x6e\x67\x20\x65\x78\x65\x63\x76\x65\x5c\x6e\x22\x29\x29\x3b\0\x20\x20\
\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\x63\x68\x61\x72\0\x5f\x5f\x41\
\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x4c\x49\x43\
\x45\x4e\x53\x45\0\x6c\x69\x63\x65\x6e\x73\x65\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\
\0\0\0\x14\0\0\0\x14\0\0\0\x2c\0\0\0\x40\0\0\0\0\0\0\0\x08\0\0\0\x17\0\0\0\x01\
\0\0\0\0\0\0\0\x04\0\0\0\x10\0\0\0\x17\0\0\0\x02\0\0\0\0\0\0\0\x34\0\0\0\x79\0\
\0\0\x05\x28\0\0\x20\0\0\0\x34\0\0\0\xbf\0\0\0\x05\x2c\0\0\x0c\0\0\0\xff\xff\
\xff\xff\x04\0\x08\0\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\0\0\0\
\0\0\0\0\x8a\0\0\0\x05\0\x08\0\x69\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\x01\x01\x01\
\x01\0\0\0\x01\0\0\x01\x01\x01\x1f\x03\0\0\0\0\x39\0\0\0\x3b\0\0\0\x03\x01\x1f\
\x02\x0f\x05\x1e\x03\x4c\0\0\0\0\x2e\x2f\xc4\x0d\xfb\x36\x5c\x56\x22\x55\xeb\
\x66\x7a\xc6\x80\xcf\x58\0\0\0\x01\xa2\x4b\x14\x08\x12\xbe\x47\xe7\xfe\x79\x33\
\x46\x71\xe6\x2f\x45\x62\0\0\0\x02\x09\xcf\xcd\x71\x69\xc2\x4b\xec\x44\x8f\x30\
\x58\x2e\x8c\x6d\xb9\x04\0\x05\x05\x0a\0\x09\x02\0\0\0\0\0\0\0\0\x03\x09\x01\
\x4b\x02\x02\0\x01\x01\x2f\x68\x6f\x6d\x65\x2f\x72\x61\x75\x6e\x69\x6c\x2d\x73\
\x69\x6e\x67\x68\x2f\x50\x72\x6f\x6a\x65\x63\x74\x73\x2f\x65\x42\x50\x46\x2d\
\x57\x61\x74\x63\x68\x64\x6f\x67\x2f\x4c\x65\x61\x72\x6e\x69\x6e\x67\x5f\x50\
\x68\x61\x73\x65\0\x2e\0\x2f\x75\x73\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\
\x62\x70\x66\0\x74\x72\x61\x63\x65\x2e\x62\x70\x66\x2e\x63\0\x76\x6d\x6c\x69\
\x6e\x75\x78\x2e\x68\0\x62\x70\x66\x5f\x68\x65\x6c\x70\x65\x72\x5f\x64\x65\x66\
\x73\x2e\x68\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xda\
\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x03\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0a\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x03\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x13\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x03\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa3\0\0\0\x12\0\x03\0\0\0\
\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\xff\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x04\0\
\0\0\x11\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x15\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\
\0\x1f\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\
\x0c\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x10\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\
\x14\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x18\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\
\x1c\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\
\x24\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x28\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\
\x2c\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x30\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\
\x34\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x38\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\
\x08\0\0\0\0\0\0\0\x02\0\0\0\x0c\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\
\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\xc4\0\0\0\0\0\0\0\x04\0\0\0\x0c\0\0\0\
\x2c\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\x50\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\
\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x22\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\
\x26\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x2a\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\
\x36\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x4b\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\
\x60\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x7d\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\
\x0b\x0c\0\x2e\x64\x65\x62\x75\x67\x5f\x61\x62\x62\x72\x65\x76\0\x2e\x74\x65\
\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x2e\x72\x65\x6c\
\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\x5f\x6f\x66\x66\x73\x65\x74\x73\0\x2e\
\x64\x65\x62\x75\x67\x5f\x73\x74\x72\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\
\x65\x5f\x73\x74\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x61\x64\x64\
\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\x6f\0\x2e\x6c\
\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x2e\x72\x65\x6c\x74\x70\x2f\x73\
\x79\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x65\
\x78\x65\x63\x76\x65\0\x68\x61\x6e\x64\x6c\x65\x5f\x65\x78\x65\x63\x76\x65\0\
\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\
\x69\x6e\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x66\x72\x61\x6d\x65\
\0\x74\x72\x61\x63\x65\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\
\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\x43\
\x45\x4e\x53\x45\0\x2e\x72\x6f\x64\x61\x74\x61\x2e\x73\x74\x72\x31\x2e\x31\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe6\0\0\0\x03\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xd2\x09\0\0\0\0\0\0\x16\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x86\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\
\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x82\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\x07\0\0\0\0\0\0\x10\
\0\0\0\0\0\0\0\x19\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xb1\0\0\
\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\x01\0\0\x01\0\0\0\
\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x74\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x84\0\0\0\0\0\0\0\xc6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x68\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x4a\x01\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x64\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x07\0\0\0\
\0\0\0\x40\0\0\0\0\0\0\0\x19\0\0\0\x08\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x26\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xfa\x01\0\0\0\0\0\0\x3c\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\0\0\0\x09\
\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\
\x19\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x39\0\0\0\x01\0\0\0\
\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x36\x02\0\0\0\0\0\0\xcc\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x58\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x54\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xd0\x08\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x19\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\
\0\0\x10\0\0\0\0\0\0\0\xfa\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x24\
\x03\0\0\0\0\0\0\xc2\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xf6\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\0\0\
\0\x10\0\0\0\0\0\0\0\x19\0\0\0\x0f\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\x19\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x04\0\0\0\0\0\0\x60\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x09\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x09\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\
\x19\0\0\0\x11\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xcd\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\x05\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc9\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x40\x09\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x19\0\0\0\x13\0\0\0\x08\
\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xbd\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x70\x05\0\0\0\0\0\0\x8e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xb9\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\x09\
\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\x19\0\0\0\x15\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\
\0\0\0\0\x44\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xfe\x05\0\0\0\0\
\0\0\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x74\
\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xd0\x09\0\0\0\0\0\0\
\x02\0\0\0\0\0\0\0\x19\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xee\0\0\
\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x78\x06\0\0\0\0\0\0\x38\x01\0\0\0\
\0\0\0\x01\0\0\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct trace_bpf *trace_bpf::open(const struct bpf_object_open_opts *opts) { return trace_bpf__open_opts(opts); }
struct trace_bpf *trace_bpf::open_and_load() { return trace_bpf__open_and_load(); }
int trace_bpf::load(struct trace_bpf *skel) { return trace_bpf__load(skel); }
int trace_bpf::attach(struct trace_bpf *skel) { return trace_bpf__attach(skel); }
void trace_bpf::detach(struct trace_bpf *skel) { trace_bpf__detach(skel); }
void trace_bpf::destroy(struct trace_bpf *skel) { trace_bpf__destroy(skel); }
const void *trace_bpf::elf_bytes(size_t *sz) { return trace_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
trace_bpf__assert(struct trace_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __TRACE_BPF_SKEL_H__ */
