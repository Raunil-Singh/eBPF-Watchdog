/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __Q1_SKEL_H__
#define __Q1_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

#define BPF_SKEL_SUPPORTS_MAP_AUTO_ATTACH 1

struct q1 {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata_str1_1;
	} maps;
	struct {
		struct bpf_program *handle_execve;
	} progs;
	struct {
		struct bpf_link *handle_execve;
	} links;

#ifdef __cplusplus
	static inline struct q1 *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct q1 *open_and_load();
	static inline int load(struct q1 *skel);
	static inline int attach(struct q1 *skel);
	static inline void detach(struct q1 *skel);
	static inline void destroy(struct q1 *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
q1__destroy(struct q1 *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
q1__create_skeleton(struct q1 *obj);

static inline struct q1 *
q1__open_opts(const struct bpf_object_open_opts *opts)
{
	struct q1 *obj;
	int err;

	obj = (struct q1 *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = q1__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	q1__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct q1 *
q1__open(void)
{
	return q1__open_opts(NULL);
}

static inline int
q1__load(struct q1 *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct q1 *
q1__open_and_load(void)
{
	struct q1 *obj;
	int err;

	obj = q1__open();
	if (!obj)
		return NULL;
	err = q1__load(obj);
	if (err) {
		q1__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
q1__attach(struct q1 *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
q1__detach(struct q1 *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *q1__elf_bytes(size_t *sz);

static inline int
q1__create_skeleton(struct q1 *obj)
{
	struct bpf_object_skeleton *s;
	struct bpf_map_skeleton *map __attribute__((unused));
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "q1";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = 24;
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt,
			sizeof(*s->maps) > 24 ? sizeof(*s->maps) : 24);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	map = (struct bpf_map_skeleton *)((char *)s->maps + 0 * s->map_skel_sz);
	map->name = ".rodata.str1.1";
	map->map = &obj->maps.rodata_str1_1;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "handle_execve";
	s->progs[0].prog = &obj->progs.handle_execve;
	s->progs[0].link = &obj->links.handle_execve;

	s->data = q1__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *q1__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x48\x02\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x09\0\
\x01\0\x85\0\0\0\x0e\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\xbf\x02\0\0\0\
\0\0\0\x5f\x12\0\0\0\0\0\0\x77\0\0\0\x20\0\0\0\x15\x02\x04\0\0\0\0\0\x18\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x0d\0\0\0\x05\0\x03\0\0\0\0\0\x18\x01\0\
\0\x0d\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x0e\0\0\0\xbf\x03\0\0\0\0\0\0\x85\0\0\
\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\x4f\x64\x64\x20\
\x70\x69\x64\x3a\x20\x25\x64\x0a\0\x45\x76\x65\x6e\x20\x70\x69\x64\x3a\x20\x25\
\x64\x0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4c\0\0\0\x04\0\
\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x74\0\0\0\0\0\x03\0\x58\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x6d\0\0\0\0\0\x03\0\x70\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x36\0\0\0\x12\0\x03\0\0\0\0\0\0\0\
\0\0\x90\0\0\0\0\0\0\0\x65\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\
\x38\0\0\0\0\0\0\0\x01\0\0\0\x04\0\0\0\x58\0\0\0\0\0\0\0\x01\0\0\0\x04\0\0\0\
\x05\x06\0\x2e\x74\x65\x78\x74\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\
\x69\x67\0\x2e\x72\x65\x6c\x74\x70\x2f\x73\x79\x73\x63\x61\x6c\x6c\x73\x2f\x73\
\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x65\x78\x65\x63\x76\x65\0\x68\x61\x6e\x64\
\x6c\x65\x5f\x65\x78\x65\x63\x76\x65\0\x6c\x69\x63\x65\x6e\x73\x65\0\x71\x31\
\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\
\x61\x62\0\x4c\x49\x43\x45\x4e\x53\x45\0\x4c\x42\x42\x30\x5f\x33\0\x4c\x42\x42\
\x30\x5f\x32\0\x2e\x72\x6f\x64\x61\x74\x61\x2e\x73\x74\x72\x31\x2e\x31\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x55\0\0\0\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xba\x01\0\0\0\0\0\0\x8a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x19\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\
\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x15\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x01\0\0\0\0\0\0\
\x20\0\0\0\0\0\0\0\x08\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x44\
\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\x04\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7b\0\0\0\x01\0\0\0\
\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd4\0\0\0\0\0\0\0\x1b\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x07\0\0\0\x03\x4c\xff\x6f\0\0\0\
\x80\0\0\0\0\0\0\0\0\0\0\0\0\xb8\x01\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\x08\0\0\0\0\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5d\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\xf0\0\0\0\0\0\0\0\xa8\0\0\0\0\0\0\0\x01\0\0\0\x05\0\0\0\x08\0\0\
\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct q1 *q1::open(const struct bpf_object_open_opts *opts) { return q1__open_opts(opts); }
struct q1 *q1::open_and_load() { return q1__open_and_load(); }
int q1::load(struct q1 *skel) { return q1__load(skel); }
int q1::attach(struct q1 *skel) { return q1__attach(skel); }
void q1::detach(struct q1 *skel) { q1__detach(skel); }
void q1::destroy(struct q1 *skel) { q1__destroy(skel); }
const void *q1::elf_bytes(size_t *sz) { return q1__elf_bytes(sz); }
#endif /* __cplusplus */


#endif /* __Q1_SKEL_H__ */
